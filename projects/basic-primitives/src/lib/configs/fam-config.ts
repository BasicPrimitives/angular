import { Visibility, OrientationType, VerticalAlignmentType, ElbowType,
  NeighboursSelectionMode, ShapeType, TextOrientationType, HorizontalAlignmentType, 
  PlacementType, NavigationMode, PageFitMode, GroupByType,
  Enabled, LineType, AdviserPlacementType, SelectionPathMode } from '../enums';
import { BackgroundAnnotationConfig } from './background-annotation-config';
import { ConnectorAnnotationConfig } from './connector-annotation-config';
import { HighlightPathAnnotationConfig } from './highlight-path-annotation-config';
import { LevelAnnotationConfig } from './level-annotation-config';
import { ShapeAnnotationConfig } from './shape-annotation-config';
import { FamItemConfig } from './fam-item-config';
import { LabelAnnotationConfig } from './label-annotation-config';
import { TemplateConfig } from './template-config';
import { TemplateRef } from '@angular/core';
import { PaletteItemConfig } from './palette-item-config';
import { Size, Thickness } from '../structs';

export class FamConfig {
  navigationMode: NavigationMode = NavigationMode.Default;
  pageFitMode: PageFitMode = PageFitMode.FitToPage;
  minimalVisibility: Visibility = Visibility.Dot;
  minimumVisibleLevels: number = 0;
  orientationType: OrientationType = OrientationType.Top;
  verticalAlignment: VerticalAlignmentType = VerticalAlignmentType.Middle;
  arrowsDirection: GroupByType = GroupByType.None;
  showExtraArrows: Boolean = true;
  extraArrowsMinimumSpace: number = 30;
  groupByType: GroupByType = GroupByType.Children;
  alignBylevels: Boolean = true;
  enableMatrixLayout: Boolean = false;
  minimumMatrixSize: number = 4;
  maximumColumnsInMatrix: number = 6;
  hideGrandParentsConnectors: Boolean = false;
  bevelSize: number = 4;
  elbowType: ElbowType = ElbowType.Round;
  elbowDotSize: number = 4;
  emptyDiagramMessage: string = "Diagram is empty.";
  items: Array<FamItemConfig> = [];
  annotations: Array<BackgroundAnnotationConfig|ConnectorAnnotationConfig|HighlightPathAnnotationConfig|ShapeAnnotationConfig|LabelAnnotationConfig|LevelAnnotationConfig> = [];
  cursorItem: number|string|null = null;
  highlightItem: number|string|null = null;
  highlightGravityRadius: number = 40;
  selectedItems: Array<number|string> = [];
  hasSelectorCheckbox: Enabled = Enabled.Auto;
  selectCheckBoxLabel: string = "Selected";
  selectionPathMode: SelectionPathMode = SelectionPathMode.None;
  neighboursSelectionMode: NeighboursSelectionMode = NeighboursSelectionMode.ParentsAndChildren;
  templates:Array<TemplateConfig> = [];
  defaultTemplateName: string | null = null;
  defaultLabelAnnotationTemplate: string | null = null;
  hasButtons: Enabled = Enabled.Auto;
  buttonsTemplate: TemplateRef<any> | null = null;
  normalLevelShift: number = 20;
  dotLevelShift: number = 20;
  lineLevelShift: number = 10;
  normalItemsInterval: number = 10;
  dotItemsInterval: number = 1;
  lineItemsInterval: number = 2;
  cousinsIntervalMultiplier: number = 5;
  itemTitleFirstFontColor: string = "#ffffff";
  itemTitleSecondFontColor: string = "#000080";
  minimizedItemShapeType: ShapeType = ShapeType.None;
  linesColor: string = "#c0c0c0";
  linesWidth: number = 1;
  linesType: LineType = LineType.Solid;
  showNeigboursConnectorsHighlighted: Boolean = false;
  highlightLinesColor: string = "#ff0000";
  highlightLinesWidth: number = 1;
  highlightLinesType: LineType = LineType.Solid;
  linesPalette: Array<PaletteItemConfig> = [];
  calloutMaximumVisibility: Visibility = Visibility.Dot;
  showCallout: Boolean = true;
  calloutPlacementOffset: number = 100;
  defaultCalloutTemplateName: string | null = null;
  calloutfillColor: string = "#000000";
  calloutBorderColor: string | null = null;
  calloutOffset: number = 4;
  calloutCornerRadius: number = 4;
  calloutPointerWidth: string = "10%";
  calloutLineWidth: number = 1;
  calloutOpacity: number = 0.2;
  buttonsPanelSize: number = 28;
  groupTitlePanelSize: number = 24;
  checkBoxPanelSize: number = 24;
  groupTitlePlacementType: AdviserPlacementType = AdviserPlacementType.Left;
  groupTitleOrientation: TextOrientationType = TextOrientationType.RotateRight;
  groupTitleVerticalAlignment: VerticalAlignmentType = VerticalAlignmentType.Middle;
  groupTitleHorizontalAlignment: HorizontalAlignmentType = HorizontalAlignmentType.Center;
  groupTitleFontSize: string = "12px";
  groupTitleFontFamily: string = "Arial";
  groupTitleColor: string = "#4169e1";
  groupTitleFontWeight: string = "normal";
  groupTitleFontStyle: string = "normal";
  groupTitleTemplate: TemplateRef<any> | null = null;
  levelTitlePanelSize: number = 24;
  levelTitlePlacementType: AdviserPlacementType = AdviserPlacementType.Left;
  levelTitlePlaceInside: Boolean = false;
  levelTitleOrientation: TextOrientationType = TextOrientationType.Auto;
  levelTitleVerticalAlignment: VerticalAlignmentType = VerticalAlignmentType.Middle;
  levelTitleHorizontalAlignment: HorizontalAlignmentType = HorizontalAlignmentType.Center;
  levelTitleFontSize: string = "12px";
  levelTitleFontFamily: string = "Arial";
  levelTitleFontColor: string = "#ffffff";
  levelTitleColor: string = "#4169e1";
  levelTitleFontWeight: string = "normal";
  levelTitleFontStyle: string = "normal";
  levelTitleTemplate: TemplateRef<any> | null = null;
  levelBackgroundTemplate: TemplateRef<any> | null = null;
  distance: number = 3;
  scale: number = 1;
  minimumScale: number = 0.5;
  maximumScale: number = 1;
  showLabels: Enabled = Enabled.Auto;
  labelSize: Size = new Size(80, 24);
  labelOffset: number = 1;
  labelOrientation: TextOrientationType = TextOrientationType.Horizontal;
  labelPlacement: PlacementType = PlacementType.Top;
  labelFontSize: string = "10px";
  labelFontFamily: string = "Arial";
  labelColor: string = "#000000";
  labelFontWeight: string = "normal";
  labelFontStyle: string = "normal";
  enablePanning: Boolean = true;
  autoSizeMinimum: Size = new Size(800, 600);
  autoSizeMaximum: Size = new Size(1024, 768);
  showFrame: Boolean = false;
  frameInnerPadding: Thickness = new Thickness(2, 2, 2, 2);
  frameOuterPadding: Thickness = new Thickness(2, 2, 2, 2);
  padding: Thickness = new Thickness(10, 10, 10, 10);

  constructor(config: Partial<FamConfig> = {}) {
    Object.assign(this, config);
  }
};
